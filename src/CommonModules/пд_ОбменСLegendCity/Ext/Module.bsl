
#Область РегламентныеЗадания

Процедура ВыгрузитьИзмененияБонусовРегламентноеЗадание() Экспорт

	ВыгрузитьИзмененияБонусов(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьИзменения(Документ, БонуснаяКарта, Сумма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(БонуснаяКарта.КодКарты) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не возможно зарегистрировать изменения. Для карты не установлен КОД КАРТЫ");
		Возврат;
	КонецЕсли;
	ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияКВыгрузке.СоздатьНаборЗаписей();
	ЖурналВыгрузки.Отбор.Документ.Установить(Документ);
	ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(БонуснаяКарта);
	ЖурналВыгрузки.Прочитать();
	
	Если ЖурналВыгрузки.Количество() > 0 Тогда
		Запись = ЖурналВыгрузки[0];	
	Иначе
	    Запись = ЖурналВыгрузки.Добавить();
	КонецЕсли;

	Запись.Документ = Документ;
	Запись.ДатаРегитрации = ТекущаяДата();
	Запись.БонуснаяКарта = БонуснаяКарта;
	Запись.Сумма = Сумма;       
	
	ЖурналВыгрузки.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьИзмененияБонусов(РучнойРежим = Истина) Экспорт
	
	НастройкиИнтеграции = ПолучитьНастройкиИнтеграции();
	
	Если НастройкиИнтеграции = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("Выгрузка изменений бонусных баллов",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,,
			"Не заполнены настройки интеграции.");
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	БонусныеНачисленияКВыгрузке.ДатаРегитрации КАК ДатаРегитрации,
	|	БонусныеНачисленияКВыгрузке.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеНачисленияКВыгрузке.Сумма КАК Сумма,
	|	БонусныеНачисленияКВыгрузке.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.пд_БонусныеНачисленияКВыгрузке КАК БонусныеНачисленияКВыгрузке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегитрации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("date", Формат(Выборка.ДатаРегитрации, "ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
		СтруктураЗапроса.Вставить("cardCode", Число(Выборка.БонуснаяКарта.КодКарты));
		СтруктураЗапроса.Вставить("amount", Выборка.Сумма * 100);
		СтруктураЗапроса.Вставить("description", "Начисление бонусов из 1С");
		
		ДанныеОтвета = ОтправитьНачислениеБонусов(НастройкиИнтеграции, СтруктураЗапроса); 
		
		Если Не ДанныеОтвета = Неопределено 
			И ДанныеОтвета.Свойство("bonusGuid") Тогда
			
			ЖурналВыгрузки = РегистрыСведений.пд_БонусныеНачисленияКВыгрузке.СоздатьНаборЗаписей();
			ЖурналВыгрузки.Отбор.Документ.Установить(Выборка.Документ);
			ЖурналВыгрузки.Отбор.БонуснаяКарта.Установить(Выборка.БонуснаяКарта);
			ЖурналВыгрузки.Прочитать();
			ЖурналВыгрузки.Очистить();
			ЖурналВыгрузки.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

Функция ОтправитьНачислениеБонусов(НастройкиИнтеграции, ДанныеЗапроса)
	
	СоединениеHTTP = УстановитьСоединение(НастройкиИнтеграции.АдресСервиса);
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(
		"/v4/bonuses",
		ПолучитьЗаголовкиСоединения(НастройкиИнтеграции.КлючAPI)
	);
	
	Если ДанныеЗапроса <> Неопределено Тогда
		
		HTTPЗапрос.УстановитьТелоИзСтроки(
			ФормированиеДанныхЗапроса(ДанныеЗапроса), 
			КодировкаТекста.UTF8,
			ИспользованиеByteOrderMark.НеИспользовать);	
			
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	
	Попытка
		
		HTTPОтвет = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ДанныеОтвета = ПолучитьДанныеЗапроса(HTTPОтвет);
						
		Иначе
		
			ВызватьИсключение "Ошибка выгрузки бонусных баллов -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0") 
				+ Символы.ПС
				+ "Описание: " + HTTPОтвет.ПолучитьТелоКакСтроку();
							
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение "Ошибка выгрузки бонусных баллов -> код ошибки: " + Формат(HTTPОтвет.КодСостояния, "ЧГ=0") 
				+ Символы.ПС
				+ "Описание: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
				
	КонецПопытки;	

	Возврат ДанныеОтвета;
		
КонецФункции

/////////////////////////////////////////////////////////////////

Функция УстановитьСоединение(АдресAPI)
	
	Попытка
		
		
		Если СтрНайти(АдресAPI, "https") Тогда
			
			HTTPS_Соединение = Новый ЗащищенноеСоединениеOpenSSL;
			
			Результат = Новый HTTPСоединение(
				СтрЗаменить(АдресAPI, "https://", ""), 
				443,,,,
				15,
				HTTPS_Соединение);
				
		Иначе
			
			Результат = Новый HTTPСоединение(
				СтрЗаменить(АдресAPI, "http://", ""), 
				80,,,,
				15);

			
		КонецЕсли;
		
				
				
	Исключение
		
		ЗаписьЖурналаРегистрации(
			"Установка соединение с сервисом LegendCity",
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,,
			"Не удалось установить соединение с сервером. Проверьте настройки авторизации."
			);
			
		Результат = Неопределено;
		
	Конецпопытки;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаголовкиСоединения(КлючAPI)
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("x-api-key", СокрЛП(КлючAPI));
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат ЗаголовкиHTTP;
	
КонецФункции	

Функция ПолучитьДанныеЗапроса(ДанныеОтвета)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(
		ДанныеОтвета.ПолучитьТелоКакСтроку()
	);
	
	Попытка
		
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат ДанныеЗапроса;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

Функция ФормированиеДанныхЗапроса(ДанныеЗапроса)
	
	ЗапросJSON = Новый ЗаписьJSON;
	
	ЗапросJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗапросJSON, ДанныеЗапроса);
	
	Возврат ЗапросJSON.Закрыть();
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНастройкиИнтеграции() Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить(
		Метаданные.Подсистемы.пд_ИнтеграцияLegendCity.Имя,
		"НастройкиИнтеграции",,
		"1С");
	
КонецФункции
	
#КонецОбласти