name: Build *.cfe

# Install git https://git-scm.com/download/win
# Install node.js, version that (officially) supports Windows 7 is 13.6.0.
# https://nodejs.org/download/release/v13.6.0/
# Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: "dev"
        required: false
        type: string

  workflow_call:

jobs:
  build-cfe:
    strategy:
      matrix:
        items: [
            {
              name1c: "Retail-2.2",
              bin1c: 'C:\Program Files\1cv8\8.3.17.1549\bin\1cv8.exe',
              template1c: 'C:\Users\User\AppData\Roaming\1C\1c8\tmplts\1c\Retail\2_2_12_30\1Cv8.dt',
            },
            # {
            #   name1c: 'Retail-2.3',
            #   bin1c: 'C:\Program Files\1cv8\8.3.17.1549\bin\1cv8.exe',
            #   template1c: 'C:\Users\User\AppData\Roaming\1C\1c8\tmplts\1c\Retail\2_3_9_42\1Cv8.dt',
            # },
          ]

    runs-on: [self-hosted, windows, x64, 1c]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add version env property with commit short sha
        run: echo ("version=" + (git rev-parse --short=7 HEAD)) >> $env:GITHUB_ENV

      - name: Set version env by tag if exist
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: echo ("version=" + $env:GITHUB_REF.replace('refs/tags/v', 'v')) >> $env:GITHUB_ENV

      - name: Set version env by input if exist
        if: ${{ inputs.version }}
        run: echo ("version=${{ inputs.version }}") >> $env:GITHUB_ENV

      - name: Run bat script
        shell: cmd
        run: |
          echo Prepare variables and temp folders
          set cfe_file=Legendcity-${{ matrix.items.name1c }}-%version%.cfe
          set extension=Legendcity
          set user1c=БорисовФМ (Администратор)

          set tmp=%cd%\tmp
          set tmp_base1c=%cd%\tmp\base
          set tmp_extensions=%cd%\tmp\extensions
          set tmp_extensions_legendcity=%cd%\tmp\extensions\%extension%
          set build_path=%cd%\build

          echo Remove tmp directory %tmp% ..
          @RD /S /Q %tmp%

          if not exist %tmp% mkdir %tmp%
          if not exist %tmp_base1c% mkdir %tmp_base1c%
          if not exist %tmp_extensions% mkdir %tmp_extensions%
          if not exist %tmp_extensions_legendcity% mkdir %tmp_extensions_legendcity%
          if not exist %build_path% mkdir %build_path%

          xcopy src %tmp_extensions_legendcity% /s /e /h

          set bin1config="${{ matrix.items.bin1c }}" CONFIG /F "%tmp_base1c%" /N "%user1c%"
          echo bin1config: %bin1config%

          echo Create 1c info base from template...
          "${{ matrix.items.bin1c }}" CREATEINFOBASE "File=%tmp_base1c%;DBFormat=8.3.8" /UseTemplate ${{ matrix.items.template1c }} /Out "%tmp%\log-base.txt"

          echo Import module source files...
          %bin1config% /LoadConfigFromFiles %tmp_extensions% -AllExtensions /Out %tmp%\log-import.txt

          echo Export cfe...
          %bin1config% /DumpCfg %build_path%\%cfe_file% -Extension %extension% /Out %tmp%\log-export.txt

          echo %build_path%\%cfe_file%

      - name: Archive *.cfe
        uses: actions/upload-artifact@v2
        with:
          name: legendcity-cfe-archive
          path: build/*.cfe
          if-no-files-found: error
          overwrite: true
